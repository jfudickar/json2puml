unit utJson2PumlCurlUtils;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  DUnitX.TestFramework, System.Zip, json2pumlconst, json2pumltools, System.SysUtils,
  json2pumldefinition, json2pumlloghandler, System.Classes;

type
  // Test methods for class TCurlUtils

  [TestFixture]
  tJson2PumlCurlUtils = class
  strict private
    fCurlMappingParameterList: tJson2PumlCurlMappingParameterList;
    fCurlDetailParameterList: tJson2PumlCurlParameterList;
    fCurlParameterList: tJson2PumlCurlParameterList;
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;
  published
    [TestCase('a/bc',  ',a,b,c,,,curl --url "a/bc"')]
    [TestCase('a/b/c', 'curl,a,/b,/c,,,curl --url "a/b/c"')]
    [TestCase('a/b/c', 'curl,a,/b,/c,x,,curl --url "a/b/c" x')]
    [TestCase('a/b/c', 'xcurl,a,/b,/c,x,test.json,xcurl --url "a/b/c" x --output "test.json"')]
    procedure TestCalculateCommand(iCurlCommand, iBaseUrl, iUrlPart1, iUrlPart2, iOption, iOutputFile, iExpectedCommand:
        string);
    [TestCase('a/b/c/${nofilm}', 'a/b/c/${nofilm},,,a/b/c/')]
    [TestCase('/a/', '/a/,,,/a/')]
    [TestCase('a/bc', 'a,b,c,a/bc')]
    [TestCase('a/b/c', 'a,/b,/c,a/b/c')]
    [TestCase('a/b/c', 'a,/b,/c,a/b/c')]
    [TestCase('a/b/c${a}', 'a,/b,/c${a},a/b/c5')]
    [TestCase('a/b/c${group}', 'a,/b,/c${group},a/b/c5')]
    [TestCase('a/b/c${name}', 'a,/b,/c${name},a/b/c&&name==5')]
    [TestCase('a/b/c${filter}', 'a,/b,/c${filter},a/b/c?filter=id=*&&name==5&&city==10&limit=10')]
    [TestCase('a/b/c${x}', 'a,/b,/c${x},a/b/cu:#v:#w:#')]
    [TestCase('a/b/c/${film}', 'a,/b,/c/${film},a/b/c/the+empire/')]
    [TestCase('a/b/c/${nofilm}', 'a,/b,/c/${nofilm},a/b/c/')]
    [TestCase('a/b/c/${film}', 'a/b/c/${film},,,a/b/c/the+empire/')]
    procedure TestCalculateUrl(iBaseUrl, iUrlPart1, iUrlPart2, iExpectedUrl: string);
    [TestCase('1<12', '1<12,true')]
    [TestCase('''a''<''b''', '''a''<''b'',true')]
    [TestCase('"a"<"b"', '"a"<"b",true')]
    procedure TestCheckEvaluation (iExecuteEvaluation: string; iResult: Boolean);
    [TestCase('${a}=${a}', '${a}=${a},true')]
    [TestCase('${a}>${b}', '${a}>${b},false')]
    [TestCase('${a}<${b}', '${a}<${b},true')]
    [TestCase('${a}<12', '${a}<12,true')]
    [TestCase('${d}<''b''', '${d}<''b'',false')]
    [TestCase('"${e}" <> ""', '"${e}" <> "",false')]
    [TestCase('"${a}" <> ""', '"${a}" <> "",true')]
    procedure TestCheckExecuteEvaluation (iExecuteEvaluation: string; iResult: Boolean);
    [TestCase('a ${b}', 'a ${b},a ')]
    [TestCase('a ${b', 'a ${b,a ${b')]
    procedure TestCleanUnusedCurlVariables (iValue, iReturnValue: string);
  end;

implementation

procedure tJson2PumlCurlUtils.Setup;
begin
  fCurlDetailParameterList := tJson2PumlCurlParameterList.Create;
  fCurlDetailParameterList.AddParameter ('c', '25');
  fCurlDetailParameterList.AddParameter ('z', '''z''');
  fCurlParameterList := tJson2PumlCurlParameterList.Create;
  fCurlParameterList.AddParameter ('a', '5');
  fCurlParameterList.AddParameter ('b', '10');
  fCurlParameterList.AddParameter ('c', '''c''');
  fCurlParameterList.AddParameter ('d', '''d''');
  fCurlMappingParameterList := tJson2PumlCurlMappingParameterList.Create;
  fCurlMappingParameterList.AddParameter ('group', '', '${a}${aa}', '', '',false);
  fCurlMappingParameterList.AddParameter ('filter', '?filter=id=*', '${name}${city}', '&limit=10', 'limit=10',false);
  fCurlMappingParameterList.AddParameter ('name', '&&name==', '${a}', '', '',true);
  fCurlMappingParameterList.AddParameter ('city', '&&city==', '${b}', '', '',true);
  fCurlMappingParameterList.AddParameter ('u', '', '${u}', '', '',true);
  fCurlMappingParameterList.AddParameter ('v', '', '${w}', '', '',true);
  fCurlMappingParameterList.AddParameter ('w', '', '${v}', '', '',true);
  fCurlMappingParameterList.AddParameter ('x', '', 'u:${u}#v:${v}#w:${w}#', '', '',false);
  fCurlMappingParameterList.AddParameter ('title', '', 'the empire', '', '',true);
  fCurlMappingParameterList.AddParameter ('film', '', '${title}', '/', '',false);
  fCurlMappingParameterList.AddParameter ('nofilm', '', '${xyz}', '/', '',true);
end;

procedure tJson2PumlCurlUtils.TearDown;
begin
  fCurlDetailParameterList.free;
  fCurlParameterList.free;
  fCurlMappingParameterList.free;
end;

procedure tJson2PumlCurlUtils.TestCalculateCommand(iCurlCommand, iBaseUrl, iUrlPart1, iUrlPart2, iOption, iOutputFile,
    iExpectedCommand: string);
var
  ReturnValue: string;
  iOptions: array of string;
  iUrlParts: array of string;
begin
  SetLength (iUrlParts, 2);
  iUrlParts[0] := iUrlPart1;
  iUrlParts[1] := iUrlPart2;
  SetLength (iOptions, 1);
  iOptions[0] := iOption;
  ReturnValue := TCurlUtils.CalculateCommand (iCurlCommand, iBaseUrl, iUrlParts, iOptions, iOutputFile, fCurlParameterList,
    fCurlDetailParameterList, fCurlMappingParameterList, false);
  Assert.AreEqual (iExpectedCommand, ReturnValue);
end;

procedure tJson2PumlCurlUtils.TestCalculateUrl(iBaseUrl, iUrlPart1, iUrlPart2, iExpectedUrl: string);
var
  ReturnValue: string;
  iUrlParts: array of string;
begin
  SetLength (iUrlParts, 2);
  iUrlParts[0] := iUrlPart1;
  iUrlParts[1] := iUrlPart2;
  ReturnValue := TCurlUtils.CalculateUrl (iBaseUrl, iUrlParts, fCurlParameterList, fCurlDetailParameterList,
    fCurlMappingParameterList);
  Assert.AreEqual (iExpectedUrl, ReturnValue);
end;

procedure tJson2PumlCurlUtils.TestCheckEvaluation (iExecuteEvaluation: string; iResult: Boolean);
var
  ReturnValue: Boolean;
begin
  ReturnValue := TCurlUtils.CheckEvaluation (iExecuteEvaluation);
  Assert.AreEqual (iResult, ReturnValue);
end;

procedure tJson2PumlCurlUtils.TestCheckExecuteEvaluation (iExecuteEvaluation: string; iResult: Boolean);
var
  ReturnValue: Boolean;
  iOutputFile: string;
begin
  ReturnValue := TCurlUtils.CheckExecuteEvaluation (iOutputFile, iExecuteEvaluation, fCurlDetailParameterList,
    fCurlParameterList, fCurlMappingParameterList);
  Assert.AreEqual (iResult, ReturnValue);
end;

procedure tJson2PumlCurlUtils.TestCleanUnusedCurlVariables (iValue, iReturnValue: string);
var
  ReturnValue: string;
begin
  ReturnValue := TCurlUtils.CleanUnusedCurlVariables (iValue);
  Assert.AreEqual (ReturnValue, iReturnValue);
end;

initialization

TDUnitX.RegisterTestFixture (tJson2PumlCurlUtils);

end.
