<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <stringProp name="TestPlan.comments">NOTE: Framework will only consider default values. (All boxes unchecked)</stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="startupDelaySec" elementType="Argument">
            <stringProp name="Argument.name">startupDelaySec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Initial Delay in Seconds when the action in a thread starts. Use the value for local testing, this will be updated at runtime by framework</stringProp>
            <stringProp name="Argument.value">01</stringProp>
          </elementProp>
          <elementProp name="numberOfThreads" elementType="Argument">
            <stringProp name="Argument.name">numberOfThreads</stringProp>
            <stringProp name="Argument.value">8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of parallel threads. Use the value for local testing, this will be updated at runtime by framework</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriodSec" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriodSec</stringProp>
            <stringProp name="Argument.value">010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long JMeter should take to get all the threads started. If there are 10 threads and a ramp-up time of 100 seconds, then each thread will begin 10 seconds after the previous thread started, for a total time of 100 seconds to get the test fully up to speed.</stringProp>
          </elementProp>
          <elementProp name="durationPerThreadSec" elementType="Argument">
            <stringProp name="Argument.name">durationPerThreadSec</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Duration in seconds how long a thread is running. Use the value for local testing, this will be updated at runtime by framework</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseUrl" elementType="Argument">
            <stringProp name="Argument.name">baseUrl</stringProp>
            <stringProp name="Argument.value">/api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">BasePath of Apigee (do not include http://, this will be defined with the protocol attributes). Use the value for local testing, this will be updated at runtime by framework</stringProp>
          </elementProp>
          <elementProp name="threadPacingTimeMs" elementType="Argument">
            <stringProp name="Argument.name">threadPacingTimeMs</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">This value has to be provided by script developer. (Will not be updated by framework)</stringProp>
          </elementProp>
          <elementProp name="startupDelaySec" elementType="Argument">
            <stringProp name="Argument.name">startupDelaySec</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Initial Delay in Seconds when the action in a thread starts. Use the value for local testing, this will be updated at runtime by framework</stringProp>
          </elementProp>
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">192.168.178.241</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostPort" elementType="Argument">
            <stringProp name="Argument.name">hostPort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostProtocol" elementType="Argument">
            <stringProp name="Argument.name">hostProtocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Json2puml">
        <stringProp name="ThreadGroup.num_threads">${numberOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriodSec}</stringProp>
        <stringProp name="ThreadGroup.duration">${durationPerThreadSec}</stringProp>
        <stringProp name="ThreadGroup.delay">${startupDelaySec}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T01_Heartbeat">
          <stringProp name="TestPlan.comments">Framework naming convention is not required in those APIs whose KPI are not being measured. Just add the API functionality as name.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#samplers</stringProp>
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/heartbeat</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T02_serviceinformation">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/serviceinformation</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T03_inputlistfile">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/inputlistfile</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T04_definitionfile">
          <stringProp name="TestPlan.comments">For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#samplers</stringProp>
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/definitionfile</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T05_errormessages">
          <stringProp name="TestPlan.comments">For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#samplers</stringProp>
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/errormessages</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10-1_json2pumlRequestSvg - json2puml">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/json2pumlRequestSvg</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;inputListFile&quot;: &quot;json2puml_inputlist.json&quot;,&#xd;
  &quot;option&quot;: &quot;default&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10-2_json2pumlRequestSvg - SpaceX">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/json2pumlRequestSvg</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;definitionFile&quot;: &quot;spacex_definition.json&quot;,&#xd;
	&quot;detail&quot;: null,&#xd;
	&quot;group&quot;: null,&#xd;
	&quot;job&quot;: null,&#xd;
	&quot;jobDescription&quot;: null,&#xd;
	&quot;inputListFile&quot;: &quot;spacex_inputlist_launches.json&quot;,&#xd;
	&quot;inputFiles&quot;: [&#xd;
	],&#xd;
	&quot;generateSummary&quot;: true,&#xd;
	&quot;generateDetails&quot;: true,&#xd;
	&quot;outputFormats&quot;: &quot;svg,puml,json,log,zip&quot;,&#xd;
	&quot;option&quot;: &quot;default&quot;,&#xd;
	&quot;outputSuffix&quot;: &quot;.&lt;option&gt;&quot;,&#xd;
	&quot;curlParameter&quot;: [&#xd;
		{&#xd;
			&quot;launch&quot;: &quot;latest&quot;&#xd;
		}&#xd;
	],&#xd;
	&quot;curlAuthenticationParameter&quot;: [&#xd;
	]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10-3_json2pumlRequestSvg - Swapi Film Characters">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/json2pumlRequestSvg</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;definitionFile&quot;: null,&#xd;
	&quot;detail&quot;: null,&#xd;
	&quot;group&quot;: null,&#xd;
	&quot;job&quot;: null,&#xd;
	&quot;jobDescription&quot;: null,&#xd;
	&quot;inputListFile&quot;: &quot;swapi_inputlist_film_characters.json&quot;,&#xd;
	&quot;inputFiles&quot;: [&#xd;
	],&#xd;
	&quot;generateSummary&quot;: true,&#xd;
	&quot;generateDetails&quot;: false,&#xd;
	&quot;outputFormats&quot;: &quot;svg,puml,json,log,zip&quot;,&#xd;
	&quot;option&quot;: &quot;default&quot;,&#xd;
	&quot;outputSuffix&quot;: null,&#xd;
	&quot;curlParameter&quot;: [&#xd;
			{&#xd;
				&quot;input.idx&quot;: &quot;1&quot;&#xd;
			},&#xd;
			{&#xd;
				&quot;input.title&quot;: &quot;The empire&quot;&#xd;
			}&#xd;
	],&#xd;
	&quot;curlAuthenticationParameter&quot;: [&#xd;
	]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10-4_json2pumlRequestSvg - Swapi Film Vehicles">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/json2pumlRequestSvg</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;definitionFile&quot;: null,&#xd;
	&quot;detail&quot;: null,&#xd;
	&quot;group&quot;: null,&#xd;
	&quot;job&quot;: null,&#xd;
	&quot;jobDescription&quot;: null,&#xd;
	&quot;inputListFile&quot;: &quot;swapi_inputlist_film_vehicles.json&quot;,&#xd;
	&quot;inputFiles&quot;:  [&#xd;
	],&#xd;
	&quot;generateSummary&quot;: true,&#xd;
	&quot;generateDetails&quot;: false,&#xd;
	&quot;outputFormats&quot;: &quot;svg,log,json,puml,zip&quot;,&#xd;
	&quot;option&quot;: &quot;default&quot;,&#xd;
	&quot;outputSuffix&quot;: null,&#xd;
	&quot;curlParameter&quot;:  [&#xd;
			{&#xd;
				&quot;id&quot;: &quot;2&quot;&#xd;
			},&#xd;
	],&#xd;
	&quot;curlAuthenticationParameter&quot;:  [&#xd;
	]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="T10-5_json2pumlRequestSvg - JsonPlaceholder">
          <intProp name="HTTPSampler.concurrentPool">6</intProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${hostProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/v1/json2pumlRequestSvg</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;definitionFile&quot;: null,&#xd;
	&quot;detail&quot;: null,&#xd;
	&quot;group&quot;: null,&#xd;
	&quot;job&quot;: null,&#xd;
	&quot;jobDescription&quot;: &quot;This is a multiline description\nto show that this is also working :-)&quot;,&#xd;
	&quot;inputListFile&quot;: &quot;placeholder_inputlist_curl.json&quot;,&#xd;
	&quot;inputFiles&quot;: [&#xd;
	],&#xd;
	&quot;generateSummary&quot;: true,&#xd;
	&quot;generateDetails&quot;: false,&#xd;
	&quot;outputFormats&quot;: &quot;png,svg,puml,json,log,zip&quot;,&#xd;
	&quot;option&quot;: &quot;default&quot;,&#xd;
	&quot;outputSuffix&quot;: null,&#xd;
	&quot;curlParameter&quot;: [&#xd;
		{&quot;userid&quot;=3}&#xd;
	],&#xd;
	&quot;curlAuthenticationParameter&quot;: [&#xd;
	]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${apigeeBase64UsernamePassword}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">-Add the Authorization header to pass the base64 encoded credentials for Apigee Gateway authorization.

NOTE: This credential is specific to the teams and the environment and script developer has to pass their own credential for the environment under test. It will not be handled by framework.

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#config_elements</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing Time">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
          <stringProp name="TestPlan.comments">Add pacing time parameter name in Pause Timer

For more understanding of this JMeter element follow the link: https://jmeter.apache.org/usermanual/test_plan.html#timers</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause">
            <stringProp name="ConstantTimer.delay">${threadPacingTimeMs}</stringProp>
            <stringProp name="RandomTimer.range">0</stringProp>
            <stringProp name="TestPlan.comments">Add pacing time parameter ${threadPacingTime_TST-678350} name in &apos;Constant Delay Offset&apos; field as defined in User Defined Variables.</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
